* TODO

** per-workgroup wg-dirty indicators


** ibuffer commands to add buffers to and remove them from workgroups


** wg-auto-update, wg-autosave-on-update, wg-autosave-on-emacs-exit


** before releasing 0.3.0:

*** make a 0.2.0 branch separate from Master


*** test everything thoroughly


*** update all docstrings


*** update the README

**** workgroups must be enabled *after* ido or iswitchb for remapping to take effect

**** buffer sets

***** Use jlf's "move to outer scope and pull things into the inner scope".
      Or maybe "Pull from the outer scope into the inner scope".

***** why they're call "buffer sets"

****** "buffer-list" it too overloaded

****** "completion-set" won't work because we don't always
       "complete" with them, like in `wg-next-buffer'

****** "set" makes you think "unordered", which is sort-of
       correct, since buffer-list filters can munge the bufer-list arbitrarily


**** member buffers

***** Can slow down workgroup restoration the first time a workgroup is restored
      (or subsequently if some of its buffers have been kill in the meantime)

***** When you should use them:
      - when you want certain files auto-visited on workgroup restoration
      - when it'd be difficult or impossible to write a filter to select the set
        of buffers you want


***** How should addition and removal of buffers from workgroups be handled?
      And how explicit should it be?  Should any buffer created in a workgroup
      automatically be added to that workgroup?  What about switching to a
      buffer in a workgroup of which it isn't a member?


***** buffer association: "1) all buffers including ephemeral such as *Help*
      etc, 2) only explicitly opened buffers (e.g. find-file, join irc channel),
      or 3) never


**** reasons for the distinction between assigned and filtered buffers


**** reasons for the base/working config distinction

***** The base config saves the provides a way to save the pristine, original state

***** The working wconfig is saved with the workgroup, too, so it's no longer
      necessary to update your workgroups if you want the most recent state
      Saving the most recent working-wconfig change with the workgroup solves a
      *lot* of problems.


***** The base config is the canonical workgroup, for when a workgroup
      is open in multiple frames.  It provides a "staging area" for "commits"
      (saves).  Otherwise, which working config gets saved?


**** reasons wg-autoupdate is a bad idea

***** If you use the save workgroup in multiple frames, the base config can
      be left in an unpredictable state, as both frames are updating the single
      base config with *their own* current state

***** It can slow things down, especially in combination with wg-autosave


**** reasons wg-autosave is a bad idea

***** If an update causes changes you didn't anticipate (easier than you think
      if you wg-update-all-workgroups, when, say, ERC is active yet), those
      destructive changes immediately become permanent.


***** It can slow things down, especially in combination with wg-autoupdate



*** update emacswiki entry


** autosave on wg-dirty


** autoupdate on working-config change


** autoconvert old saved workgroup files



** face inheritance


** replace desktop.el
   - erc and gnus persistence


** buffer-list filters
*** all, assigned, filtered, assigned-and-filtered, fallback
*** turning them on/off
*** cycling through them

;; Buffer list filtration examples:

;; (wg-workgroup-buffer-list-filters (wg-current-workgroup))
;; (wg-set-workgroup-buffer-list-filters (wg-current-workgroup) nil)

;; (wg-add-workgroup-buffer-list-filter
;;  (wg-current-workgroup) "Init files"
;;  '(wg-filter-buffer-list-by-root-path "~/emacs/elisp/init"))
;; (wg-remove-workgroup-buffer-list-filter (wg-current-workgroup) "Init files")

;; (wg-add-workgroup-buffer-list-filter
;;  (wg-current-workgroup) "IRC" '(wg-filter-buffer-list-by-regexp "^#"))
;; (wg-remove-workgroup-buffer-list-filter (wg-current-workgroup) "IRC")

;; (wg-add-workgroup-buffer-list-filter
;;  (wg-current-workgroup) "elisp"
;;  '(wg-filter-buffer-list-by-major-mode 'emacs-lisp-mode))
;; (wg-remove-workgroup-buffer-list-filter (wg-current-workgroup) "elisp")



** winsav.el-style complex window adding


** workgroups screencast


** <quotemstr> thunk: It'd also be useful for facilities that parse headers.
   <quotemstr> thunk: You need to know compiler options and search paths, and
   finding that based on a particular buffer is problematic.

   <thunk> There should be a facility for storage and retrieval of arbitrary data
   as workgroup parameters



** possibly undo/redo of changes to the workgroup, like addition and removal of buffer list filters, etc.


* BUGS

** jlf's A->B but not B->A morph error


** sm's Frozen terminal after C-z ?


* NOTES


